version: "3.7"

#################### THIS SECTIONS CONTAINS SOME EXPLANATIONS AND TIPS ON HOW TO WORK WITH DOCKER-COMPOSE ##############

# To start the graphical interfaces for the db services, use the following command in the root workspace folder:

# docker-compose -f ./docker-compose.yml -f .docker-compose.db-gui.yml <compose-command>

# The password required to access our services are specified inside a .env file in the repository root directory. The env structure is documented in the .env.example file.

# Removed container_name properties because if they're set we cannot start multiple copies of the service

# The "ports" mapping exposes the given ports to the HOST. The "expose" mapping only exposes given the ports to other services, which is what we want because only the server talks to the external world

# We use named volumes short syntax: [SOURCE:]TARGET[:MODE].
# SOURCE is the named volume, TARGET is the folder inside the container MODE is ro (read-only),

# To get an interactive shell inside a RUNNING container, use:
# 'docker-compose exec <service-mapping-key> <shell-command>'
#
### EXAMPLES
#
# generic bash shell:
# docker-compose exec <...> bash
#
# MariaDB shell:
# docker-compose exec rdb mariadb
#
# InfluxDB shell:
# docker-compose exec tsdb influx

########################################################################################################################

# TODO use this command to dump a running container's db contents:
# docker exec rdb sh -c 'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > ./db/relational/dump/all-databases.sql
# TODO how do we define external services like our web-app?
# TODO use docker/kube secrets to manage passwords
services:
  # TODO add server container configuration
  # server:
  #   build: ...
  #   depends_on:
  #     - rdb
  #     - tsdb

  # TODO add health check
  rdb:
    build:
      context: ./db/relational
      # # XXX we will use build: target: prod to specify the target stage with multi-stage dockerfiles
      # target: name-of-stage

    restart: always

    environment:
      # TODO add a regular user to be used by spring
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:?err}

    expose:
      - "3306"

    volumes:
      - ./db/relational/mysqldb:/var/lib/mysql

  # TODO add health check
  tsdb:
    build:
      context: ./db/time-series
      # target: name-of-stage

    restart: always

    environment:
      # TODO we should not create the db here
      INFLUXDB_DB: stalker-tsdb
      # TODO add a regular user to be used by spring
      INFLUXDB_ADMIN_USER: root
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD:?err}

    expose:
      - "8086"

    volumes:
      - .db/time-series/influxdb:/var/lib/influxdb/data

# TODO should use this on the left side of tsdb and rdb volumes syntax ([SOURCE:]TARGET[:MODE])
# Names our volumes
volumes:
  data-rdb:
  data-tsdb:
