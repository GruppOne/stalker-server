plugins {
  id 'org.springframework.boot' version '2.3.0.M4'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'java'

  // expand variables defined in dotenv
  id "co.uzzu.dotenv.gradle" version "1.1.0"

  id "org.sonarqube" version "2.8"
  // FIXME checkstyle not working
  // id 'checkstyle'
  id 'jacoco'
}

group = 'tech.gruppone.stalker'
version = '0.5.0'
sourceCompatibility = '11'

configurations {
  developmentOnly

  runtimeClasspath {
    extendsFrom developmentOnly
  }

  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
  maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
//  Supports built in (or custom) endpoints that let you monitor and manage your application - such as application health, metrics, sessions, etc.
//  implementation 'org.springframework.boot:spring-boot-starter-actuator'

//  Provides Reactive Relational Database Connectivity to persist data in SQL stores using Spring Data in reactive applications.
  implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'

//  Send email using Java Mail and Spring Framework's JavaMailSender.
  implementation 'org.springframework.boot:spring-boot-starter-mail'

//  Build reactive web applications with Spring WebFlux and Netty.
  implementation 'org.springframework.boot:spring-boot-starter-webflux'

//  Highly customizable authentication and access-control framework for Spring applications.
//  implementation 'org.springframework.boot:spring-boot-starter-security'

//  Java annotation library which helps to reduce boilerplate code.
  compileOnly 'org.projectlombok:lombok'

//  Provides fast application restarts, LiveReload, and configurations for enhanced development experience.
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

//  MySQL JDBC and R2DBC driver.
  runtimeOnly 'dev.miku:r2dbc-mysql'
  runtimeOnly 'mysql:mysql-connector-java'

//  Generate metadata for developers to offer contextual help and "code completion" when working with custom configuration keys (ex.application.properties/.yml files).
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

  annotationProcessor 'org.projectlombok:lombok'

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

//  Provides a platform neutral way for running an LDAP server in unit tests.
  testImplementation 'com.unboundid:unboundid-ldapsdk'

  testImplementation 'io.projectreactor:reactor-test'
  // testImplementation 'org.springframework.security:spring-security-test'

//  ---------------------------------------------------------------------------------

//  influxdb 1.7 java client
  implementation 'org.influxdb:influxdb-java:2.17'
}

test {
  useJUnitPlatform()

  finalizedBy {
    jacocoTestReport
  }
}

processResources {
  filesMatching('application.properties') {
    expand(project.properties)
  }
}

ext {
  mysqlRootPassword = "${env.MYSQL_ROOT_PASSWORD.orElse("password")}"
  influxdbAdminPassword = "${env.INFLUXDB_ADMIN_PASSWORD.orElse("password")}"
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs = [
    '-Xlint:all',
    '-Xlint:-processing',
    '-Werror'
  ]
}

// TODO add checkstyle plugin configuration

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled false
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }

  dependsOn {
    jacocoTestReport
  }
}

check {
  dependsOn {
    jacocoTestCoverageVerification
  }
}

sonarqube {
  properties {
    property "sonar.sourceEncoding", "UTF-8"

    property "sonar.projectName", "stalker-server"
    property "sonar.projectKey", "GruppOne_stalker-server"
    property "sonar.organization", "grupp-one"

    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.login", "${env.SONARCLOUD_LOGIN.orNull()}"

    property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

tasks.findByName('sonarqube').mustRunAfter('check')
