openapi: "3.0.2"
info:
  title: Stalker API
  version: "0.1.0"
  description: "Stalker API - GruppOne for Imola Informatica"

servers:
  - url: http://localhost:8080/
    description: Development server
  # - url: https://{environment}.GruppOne.com/v1
  #     variables:
  #       environment:
  #         default: api    # Production server
  #         enum:
  #           - api         # Production server
  #           - api.dev     # Development server
  #           - api.staging # Staging server

tags:
  - name: users
    description: Operations concerning users
  - name: organizations
    description: Operations concerning organizations
  - name: movement tracking
    description: Updates to an user's current position

paths:
  /user:
    get:
      tags:
        - users
      summary: get the list of registered users
      responses:
        "200":
          description: Success
    # new user registration
    post:
      summary: register a new user
      responses:
        "200":
          description: User successfully registered
        "406":
          description: Email already registered
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

  /user/login:
    post:
      tags:
        - users
      summary: user login in Stalker's app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Login was successful
        "400":
          description: Incorrect credentials

  /user/logout:
    post:
      tags:
        - users
      summary: an user wants to log out from his client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloseSession"
      responses:
        "200":
          description: Successfully logged out
        "408":
          description: Request timed out

  /user/passwordRecovery:
    post:
      tags:
        - users
      summary: an user requires to reset his Stalker account's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: the email address of the account that needs to recover the password
      responses:
        "200":
          description: An email was sent to the specified address
        "406":
          description: Email does not match an account

  /user/{userId}:
    parameters: # we need insert 'parameters' at the top, if 'parameters' are shared by all the operations in a particular endpoint --> save bytes!
      - in: path
        name: userId
        schema:
          type: integer
        required: true
        description: numeric id of the user
    get:
      tags:
        - users
      summary: get information about a specific user
      responses:
        "200":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: delete the specified user account
      responses:
        "200":
          description: Success
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  /user/{userId}/history:
    get:
      tags:
        - users
      summary: get the history of the current user's accesses to organizations
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Id of the user
      responses:
        "200":
          description: Success
        "404":
          description: User has no history

  # connect/disconnect to/from an organization
  /user/{userId}/{organizationId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
        required: true
        description: id of the user
      - in: path
        name: organizationId
        schema:
          type: integer
        required: true
        description: id of the organization
    get:
      tags:
        - users
        - organizations
      summary: connect the current user into a specified organization
      responses:
        "200":
          description: Successful connection
        "408":
          description: Requested timed out
    delete:
      tags:
        - users
        - organizations
      summary: disconnect the current user from a specified organization
      responses:
        "200":
          description: Successful disconnection
        "408":
          description: Requested timed out

  /user/{userId}/findConnectedOrganizations:
    get:
      tags:
        - users
        - organizations
      summary: returns the list of organizations that a user has connected to
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: id of the user
      responses:
        "200":
          description: The list of the ids of the organizations the user is connected to

  /organization:
    get:
      tags:
        - organizations
      summary: Returns the list of all the organizations registered to Stalker
      responses:
        "200":
          description: The list of organizations registered to Stalker
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        "404":
          $ref: "#/components/responses/NotFound"
    put: # request updating organizations
      tags:
        - organizations
      summary: A mobile application's user requires an updating of the organizations's list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: List of organization updated
        "405":
          description: Validation exception
        "408":
          description: Request timed out

  /organization/{organizationId}:
    parameters:
      - in: path
        name: organizationId
        schema:
          type: integer
        required: true
        description: numeric id of the organization
    get:
      tags:
        - organizations
      summary: Get information about a specific organization
      responses:
        "200":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: the admininstrator wants to delete the specified organization
      operationId: organizationId
      responses:
        "200":
          description: Success, the organization has been deleted
        "400":
          description: Organization not found
        "408":
          description: Request timed out

  /organization/addOrganization:
    post:
      tags:
        - organizations
      summary: the administrator wants to create a new organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the organization has been created
        "400":
          description: The organization already exists

  #the administrator modify an organization
  /organization/{organizationId}/modify:
    parameters:
      - in: path
        name: organizationId
        schema:
          type: integer
        required: true
        description: numeric id of the organization
    get: # if the administrator wants to change organization data, the server must return the current organization data, otherwise the administrator can't modify them
      tags:
        - organizations
      summary: get data about a specific organization
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - organizations
      summary: the administrator wants to send the changed data about a specific organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been modified
        "408":
          description: Requested timed out

  # add a place into an organization
  /organization/addPlace:
    post:
      tags:
        - organizations
      summary: a manager wants to add a place into the organization who manages himself
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been created
        "400":
          description: The place already exists inside the current organization

  # modify place data or remove place by an organization
  /organization/{placeId}:
    parameters:
      - in: path
        name: placeId
        schema:
          type: integer
        required: true
        description: numeric id of the place
    get: # if a manager wants to change place data, the server must return the current place data, otherwise the manager can't modify them
      tags:
        - organizations
      summary: get data about a specific place
      responses:
        "200":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - organizations
      summary: a manager wants to send the changed data about a specific place
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been modified
        "400":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: delete the specified place
      responses:
        "200":
          description: Success, the place has been deleted
        "404":
          description: Place not found

  #TODO endpoint to monitor an organization? (AUC5)
  #TODO endpoint to monitor an employee? (AUC6)

  # unique endpoint to describe adding/deleting web app users (i.e. an admin create/delete an owner exc.)
  /user/{userId}/organizationRole:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
        required: true
        description: id of the user
    post:
      tags:
        - users
      summary: the operation which describes the creation of all new users for web application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Success, a new user has been created
        "408":
          description: Request timed out
    delete:
      tags:
        - users
      summary: the operation which describes the deletion of all new users for web application
      responses:
        "200":
          description: Success, an user has been deleted
        "404":
          description: User not found

  #an user required his personal data in "My profile"
  /user/{userId}/userData:
    get:
      tags:
        - users
      summary: an user required the visualization of his personal data
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: id of the user
      responses:
        "200":
          description: Success
        "408":
          description: Request timed out

  #TODO is it needed?
  # /user/findByOrganization/{organizationId}:
  #   get:
  #     responses:
  #       "200":
  #         responseBody:
  #TODO endpoints for UserAccessToPlace e UserExitFromPlace for known/unknown tracking user

components:
  responses:
    $ref: "./components/responses.yml"

  schemas:
    $ref: "./components/schemas.yml"

  securitySchemes:
    $ref: "./components/securitySchemes.yml"
