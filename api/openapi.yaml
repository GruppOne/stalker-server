openapi: "3.0.2"
info:
  title: Stalker API
  version: "0.1.0"
  description: "Stalker API - GruppOne for Imola Informatica"

servers:
  - url: http://localhost:8080/
    description: Development server
  # - url: https://{environment}.GruppOne.com/v1
  #     variables:
  #       environment:
  #         default: api    # Production server
  #         enum:
  #           - api         # Production server
  #           - api.dev     # Development server
  #           - api.staging # Staging server

tags:
  - name: users
    description: Operations concerning users
  - name: organizations
    description: Operations concerning organizations
  - name: monitor
    description: Operations concerning monitoring organizations and places
  - name: tracking
    description: Operation concerning users tracking

paths:
  #FIXME is this path needed? In which cases?
  /user:
    get:
      tags:
        - users
      summary: get the list of registered users
      operationId: getUsers
      responses:
        "200":
          description: Success

  /user/signUp:
    post:
      summary: register a new user, both mobile application and web application
      operationId: userSignUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User successfully registered
        "406":
          description: Email already registered

  /user/login:
    post:
      tags:
        - users
      summary: user login in Stalker's app
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Login was successful
        "400":
          description: Incorrect credentials

  /user/logout:
    post:
      tags:
        - users
      summary: an user wants to log out from his client
      operationId: userLogout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloseSession"
      responses:
        "200":
          description: Successfully logged out
        "408":
          description: Request timed out

  /user/passwordRecovery:
    post:
      tags:
        - users
      summary: an user requires to reset his Stalker account's password
      operationId: userPasswordRecovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: the email address of the account that needs to recover the password
      responses:
        "200":
          description: An email was sent to the specified address
        "406":
          description: Email does not match an account

  /user/{userId}:
    parameters: # we need insert 'parameters' at the top, if 'parameters' are shared by all the operations in a particular endpoint --> save bytes!
      - $ref: "#/components/parameters/userId"
    get:
      tags:
        - users
      summary: get information about a specific user
      operationId: getUserById
      responses:
        "200":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: delete the specified user account
      operationId: deleteUserById
      responses:
        "200":
          description: Success, an user has been deleted
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

  /user/{userId}/history:
    get:
      tags:
        - users
      summary: get the history of the current user's accesses to organizations
      operationId: userHistoryById
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success, an user get his history
        "404":
          description: User has no history

  # connect/disconnect to/from an organization
  /user/{userId}/{organizationId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/organizationId"
    get:
      tags:
        - users
        - organizations
      summary: connect the current user into a specified organization
      operationId: userConnectionIntoAnOrganization
      responses:
        "200":
          description: Successful connection
        "408":
          description: Requested timed out
    delete:
      tags:
        - users
        - organizations
      summary: disconnect the current user from a specified organization
      operationId: userDisonnectionByAnOrganization
      responses:
        "200":
          description: Successful disconnection
        "408":
          description: Requested timed out

  #FIXME is it needed?? Because this action is client-side (a filter in mobile application)
  /user/{userId}/findConnectedOrganizations:
    get:
      tags:
        - users
        - organizations
      summary: returns the list of organizations that a user has connected to
      operationId: getConnectedOrganizationsByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: The list of the ids of the organizations the user is connected to

  /organization:
    get:
      tags:
        - organizations
      summary: Returns the list of all the organizations registered to Stalker
      operationId: getOrganizations
      responses:
        "200":
          description: The list of organizations registered to Stalker
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        "404":
          $ref: "#/components/responses/NotFound"
    # to update/refresh organizations list
    put:
      tags:
        - organizations
      summary: A mobile application's user requires an updating of the organizations list
      operationId: updateOrganizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: List of organization updated
        "405":
          description: Validation exception
        "408":
          description: Request timed out

  /organization/{organizationId}:
    parameters:
      - $ref: "#/components/parameters/organizationId"
    get:
      tags:
        - organizations
      summary: Get information about a specific organization
      operationId: getOrganizationById
      responses:
        "200":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: the admininstrator wants to delete the specified organization
      operationId: deleteOrganizationById
      responses:
        "200":
          description: Success, the organization has been deleted
        "400":
          description: Organization not found
        "408":
          description: Request timed out

  /organization/addOrganization:
    post:
      tags:
        - organizations
      summary: the administrator wants to create a new organization
      operationId: addOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the organization has been created
        "400":
          description: The organization already exists

  #the administrator modify an organization
  /organization/{organizationId}/changeData:
    post:
      tags:
        - organizations
      summary: the administrator wants to send the changed data about a specific organization
      operationId: changeOrganizationData
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been modified
        "408":
          description: Requested timed out

  # add a place into an organization
  /organization/{organizationId}/addPlace:
    post:
      tags:
        - organizations
      summary: a manager wants to add a place into the organization who manages himself
      operationId: addPlaceIntoAnOrganizationById
      parameters:
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been created
        "400":
          description: The place already exists inside the current organization

  # modify place data or remove place by an organization
  /organization/{organizationId}/{placeId}/changeData:
    parameters:
      - $ref: "#/components/parameters/organizationId"
      - $ref: "#/components/parameters/placeId"
    post:
      tags:
        - organizations
      summary: a manager wants to send the changed data about a specific place
      operationId: changePlaceData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been modified
        "400":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: delete the specified place
      operationId: deletePlace
      responses:
        "200":
          description: Success, the place has been deleted
        "404":
          description: Place not found

  # monitor a specific organization
  /monitor/organization/{organizationId}:
    get:
      tags:
        - monitor
        - organization
      summary: a viewer wants to know the number of users in an specific organization
      operationId: getNumberUserInAnOrganitazion
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: Success, the number of users has been received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUserCounter"
        "404":
          description: Organization not found

  # monitor a specific place in a private organization
  /monitor/organization/{organizationId}/place/{placeId}:
    get:
      tags:
        - monitor
        - organization
      summary: a viewer wants to know the number of users in a specific place of a specific PRIVATE organization
      operationId: getNumberUserInAPlace
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/placeId"
      responses:
        "200":
          description: Success, the number of users has been received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceUserCounter"
        "404":
          description: Place inside the organization not found

  # monitor a specific employee
  /monitor/{userId}:
    get:
      tags:
        - monitor
        - organization
      summary: a viewer wants to know all the data concerning the accesses of a specific employee
      description: this operation is permitted only if the user is inside a private organization
      operationId: getAccessInformationByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success, the informations about the user has been received
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/OrganizationUserCounter"
                  - $ref: "#/components/schemas/PlaceUserCounter"
        "404":
          description: "Operation not allowed: the specified user is inside a public organization"

  #FIXME There should be an other endpoint concerning the entire report of user accesses, but this requirements is optional. So, go on

  # unique endpoint to describe adding/deleting web app users (i.e. an admin create/delete an owner exc.)
  /user/{userId}/createUser:
    post:
      tags:
        - users
      summary: the operation which describes the creation of all new users for web application
      operationId: createNewUserInAnOrganization
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Success, a new user has been created
        "404":
          description: "Operation not allowed: the current user has no creation permission"
        "408":
          description: Request timed out

  /user/{userId}/deleteUser:
    delete:
      tags:
        - users
      summary: the operation which describes the deletion of all new users for web application
      operationId: deleteUserInAnOrganization
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success, an user has been deleted
        "404":
          description: "Operation not allowed: the current user has no deletion permission"

  #FIXME an user required his personal data in "My profile": optional?
  /user/{userId}/userData:
    get:
      tags:
        - users
      summary: an user required the visualization of his personal data
      operationId: personalUserDataById
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success
        "408":
          description: Request timed out

  # enter/exit in an organization (necessary for the comunication with InfluxDB)
  /tracking/organization:
    post:
      tags:
        - tracking
      summary: an user accesses into an organization
      operationId: AccessOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, an user has entered into an organization
        "408":
          description: Request timed out
    delete:
      tags:
        - tracking
      summary: an user exits from an organization
      operationId: ExitOrganization
      responses:
        "200":
          description: Success, an user has exited by an organization
        "408":
          description: Request timed out

  # enter/exit in a place of an organization (necessary for the comunication with InfluxDB)
  /tracking/organization/place:
    post:
      tags:
        - tracking
      summary: an user accesses into a place of an organization
      operationId: AccessOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, an user has entered into an organization
        "408":
          description: Request timed out
    delete:
      tags:
        - tracking
      summary: an user exits from a place of an organization
      operationId: ExitOrganization
      responses:
        "200":
          description: Success, an user has exited by a place of an organization
        "408":
          description: Request timed out

  # an user become anonymous into an organization
  /tracking/{userId}/{organizationId}/unknownIdentity:
    post:
      tags:
        - tracking
      summary: the operation which permits to a specific users to make unknown his identity into a current specific PRIVATE organization
      operationId: UnknownUserTracking
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppConnections"
      responses:
        "200":
          description: Success, now the identity user is unknown
        "408":
          description: Request timed out

  # an user become known into an organization
  /tracking/{userId}/{organizationId}/knownIdentity:
    post:
      tags:
        - tracking
      summary: the operation which permits to a specific users to make known his identity into a current specific PRIVATE organization
      operationId: KnownUserTracking
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppConnections"
      responses:
        "200":
          description: Success, now the identity user is known
        "408":
          description: Request timed out

  #TODO is it needed? What does it mean?
  # /user/findByOrganization/{organizationId}:
  #   get:
  #     responses:
  #       "200":
  #         responseBody:

components:
  parameters:
    userId:
      in: path
      name: userId
      schema:
        type: integer
      required: true
      description: id of the user

    organizationId:
      in: path
      name: organizationId
      schema:
        type: integer
      required: true
      description: numeric id of the organization

    placeId:
      in: path
      name: placeId
      description: numeric id of the place
      required: true
      schema:
        type: integer
        format: int64

  responses:
    $ref: "./components/responses.yaml"

  schemas:
    $ref: "./components/schemas.yaml"

  securitySchemes:
    $ref: "./components/securitySchemes.yaml"
