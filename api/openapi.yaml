openapi: 3.0.3
info:
  title: Stalker API
  description: |
    The API specification developed by GruppOne for the Stalker project.
  contact:
    name: GruppOne
    email: gruppone.swe@gmail.com
    url: 'https://github.com/GruppOne'
  license:
    name: GNU GPLv3
    url: 'https://www.gnu.org/licenses/gpl-3.0-standalone.html'
  version: 1.0.0
servers:
  - url: 'http://localhost:11111'
    description: Development server.
  - url: 'https://{environment}.gruppone.tech/v{majorVersion}'
    variables:
      environment:
        enum:
          - api.staging
          - api
        default: api
      majorVersion:
        default: '0'
    description: Staging and Production servers.
tags:
  - name: both clients
    description: 'This operation should be available to both clients (mobile & web app).'
  - name: mobile app
    description: This operation should be available to mobile app users.
  - name: web app
    description: 'This operation should be available to web app users (owners, managers, viewers).'
paths:
  /location/update:
    post:
      description: "We send inside/outside updates on the user's position relative to the places of the organizations they're connected to give the server enough information to estimate the number of people currently inside a building, using the power of MATH and STATISTICS."
      operationId: postLocationUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/MultiLocationInfo.v1.yaml
        required: true
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Create an update for a user's current location."
      tags:
        - mobile app
  '/organization/{organizationId}':
    delete:
      description: Delete the specified organization. Operation reserved only to the administrator.
      operationId: deleteOrganizationById
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Delete an organization.
      tags:
        - web app
    get:
      description: Get all information about a specific organization INCLUDING ldapConfiguration.
      operationId: getOrganizationById
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: ./model/organization/Organization.v1.yaml
          description: Ok. The response contains all the public information on the specific organization.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Read an organization's information."
      tags:
        - both clients
    parameters:
      - $ref: '#/components/parameters/organizationId'
    put:
      description: Send the changed data about a specific organization. Operation reserved only to the administrator.
      operationId: putOrganizationDataById
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/organization/Organization.v1.yaml
        required: true
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Update an organization's data."
      tags:
        - web app
  '/organization/{organizationId}/place/{placeId}':
    delete:
      description: Delete the specified place. Operation reserved only to managers and up.
      operationId: deletePlace
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Delete a place.
      tags:
        - web app
    parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/placeId'
    put:
      description: Change data for a specific place. Operation reserved only to the managers and up.
      operationId: putPlaceData
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/organization/Place.v1.yaml
        required: true
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Update a place's data."
      tags:
        - web app
    get:
      summary: Read information of a place.
      operationId: get-organization-organizationId-place-placeId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/organization/Place.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      description: Get all the information about a specific place in a specific organization.
      tags:
        - web app
  '/organization/{organizationId}/places':
    parameters:
      - $ref: '#/components/parameters/organizationId'
    post:
      description: Add a new place to the given organization. Operation reserved only to the managers and up.
      operationId: postPlaceByOrganizationId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/organization/PlaceData.v1.yaml
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: ./model/GenericId.v1.yaml
                required:
                  - id
          description: Created. The response contains the id of the newly created place.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Create a new place.
      tags:
        - web app
    get:
      summary: Read all the places of the organization.
      operationId: get-organization-organizationId-places
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  places:
                    type: array
                    items:
                      $ref: ./model/organization/Place.v1.yaml
                required:
                  - places
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      description: Get all the places of a specific organization.
      tags:
        - both clients
  '/organization/{organizationId}/places/report':
    parameters:
      - $ref: '#/components/parameters/organizationId'
    get:
      summary: Read an organizational report.
      tags:
        - web app
      responses:
        '204':
          description: Not implemented yet.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          description: Unfinished endpoint.
        default:
          $ref: '#/components/responses/DefaultResponse'
      operationId: get-organization-organizationId-report
      description: Get a report detailing time spent at each place and most frequented places. Optional feature.
  '/organization/{organizationId}/user/{userId}/history':
    parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/userId'
    get:
      summary: "Read an user's history relative to an organization."
      tags:
        - web app
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/organization/UserHistoryPerOrganization.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      operationId: get-organization-organizationId-user-userId-history
      description: "Get the history of this user's visited places in this organization."
  '/organization/{organizationId}/user/{userId}/role':
    delete:
      description: Delete an existing role for a user (without deleting the user or their connection to the organization).
      operationId: delete-organization-organizationId-user-role
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Delete a role for a user.
      tags:
        - web app
    parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/userId'
    post:
      description: Add a new role for a user.
      operationId: post-organization-organizationId-user-role
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newRole:
                  $ref: ./model/AdministratorType.v1.yaml
              required:
                - newRole
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Create a role for a user in an organization.
      tags:
        - web app
    put:
      summary: Update a role for a user in an organization.
      operationId: put-organization-organizationId-user-userId-role
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                modifiedRole:
                  $ref: ./model/AdministratorType.v1.yaml
              required:
                - modifiedRole
        description: Change an existing role for a user in an organization.
      tags:
        - web app
      description: Changes an existing role for a user in an organization.
  '/user/{userId}':
    delete:
      description: Request to delete a user and its data.
      operationId: delete-user-userId
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Delete a user from Stalker.
      tags:
        - mobile app
    put:
      description: "Update a user's data."
      operationId: put-user-userId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/user/UserData.v1.yaml
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Update a user's data."
      tags:
        - mobile app
    get:
      summary: Read information about an user.
      operationId: get-user-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/user/User.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      description: Get information on a specific user.
      tags:
        - both clients
    parameters:
      - $ref: '#/components/parameters/userId'
  '/user/{userId}/logout':
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      description: Send a logout request.
      operationId: post-user-logout
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Create a logout request for a user.
      tags:
        - both clients
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: ./model/GenericId.v1.yaml
  '/user/{userId}/organization/{organizationId}/connection':
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/organizationId'
    delete:
      summary: Delete a user connection to an organization.
      operationId: delete-user-userId-organizations-connection
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      description: Request the disconnection of a user from an organization.
      tags:
        - mobile app
    post:
      description: The request body should have an LDAP property only if the organization is private.
      operationId: post-user-userId-organization-organizationId-connect
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                rdn:
                  type: string
                ldapPassword:
                  type: string
                  format: password
              required:
                - rdn
                - ldapPassword
        description: ''
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          content:
            application/json:
              schema:
                properties:
                  message:
                    enum:
                      - The given LDAP credentials are not valid.
                      - The server could not authenticate the user.
                    type: string
                type: object
          description: Unauthorized
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Create a request to connect a user to an organization.
      tags:
        - mobile app
  '/user/{userId}/organizations/connections':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      description: Get the list of organizations that a user has connected to.
      operationId: get-user-userId-organizations-connections
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectedOrganizationsIds:
                    type: array
                    items:
                      $ref: ./model/GenericId.v1.yaml
                required:
                  - connectedOrganizationIds
          description: Ok. The response contains the list of the ids of the organizations the user is connected to.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Read the list of all organizations a user is connected to.
      tags:
        - mobile app
  '/user/{userId}/organizations/roles':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: "Read a user's roles in all relevant organizations."
      tags:
        - web app
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/user/RolesInOrganizations.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      operationId: get-user-userId-organizations-roles
      description: "Get an array with this user's roles in all organizations where he's at least a viewer."
  '/user/{userId}/password':
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      summary: "Update a user's password."
      operationId: put-users-userId-password
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      description: Changes the password of an user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - oldPassword
                - newPassword
      tags:
        - mobile app
  '/user/{userId}/history':
    get:
      description: "Get the history of a user's visited places for every organization. The time since he entered in each place can be obtained from this data."
      operationId: get-user-userId-history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/user/UserHistory.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Read a user's visited places history."
      tags:
        - mobile app
    parameters:
      - $ref: '#/components/parameters/userId'
  '/organization/{organizationId}/users/connections':
    get:
      description: Get the list of all users connected to this organization.
      operationId: get-organization-organizationId-users-connected
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectedUsers:
                    type: array
                    items:
                      $ref: ./model/user/User.v1.yaml
                required:
                  - connectedUsers
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Read the list of users connected to an organization.
      tags:
        - web app
    parameters:
      - $ref: '#/components/parameters/organizationId'
  '/organization/{organizationId}/users/inside':
    get:
      operationId: get-organization-organizationId-users-inside
      summary: Read the number of users inside an organization.
      description: Read the number of users currently inside an organization and its places.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/organization/UsersInsideOrganization.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      tags:
        - web app
    parameters:
      - $ref: '#/components/parameters/organizationId'
  '/organization/{organizationId}/users/roles':
    parameters:
      - $ref: '#/components/parameters/organizationId'
    get:
      summary: Read all users with roles in this organization.
      tags:
        - web app
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./model/organization/UsersWithRoles.v1.yaml
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/DefaultResponse'
      operationId: get-organization-organizationId-users-roles
      description: Get a list of all users with roles in this organization.
  /organizations:
    get:
      description: 'Get the list of all the organizations registered to Stalker, complete with all details EXCEPT private information (ldapConfiguration).'
      operationId: get-organizations
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: ./model/organization/Organization.v1.yaml
                required:
                  - organizations
          description: Ok. The response contains the list of organizations registered to Stalker.
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Read all organizations.
      tags:
        - both clients
    post:
      description: Request the creation of a new organization.
      operationId: postOrganizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/organization/OrganizationData.v1.yaml
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: ./model/GenericId.v1.yaml
                required:
                  - id
          description: Created. The response contains the id of the newly created organization.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Create an organization.
      tags:
        - web app
  /user/anonymous:
    post:
      summary: Create a request for an anonymous token.
      operationId: post-user-anonymous
      responses:
        '200':
          description: 'OK. The response is an encoded JWT that contains the claim "anonymous": true and a random UUID in the subject field.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  anonymousJwt:
                    $ref: ./model/user/EncodedJwt.v1.yaml
                required:
                  - anonymousJwt
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/DefaultResponse'
      description: Obtain a token to be used as anonymous id in /location/update requests.
      tags:
        - mobile app
  /user/login:
    post:
      description: This endpoint should not have a security scheme.
      operationId: postUserLoginCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./model/user/LoginData.v1.yaml
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    $ref: ./model/user/EncodedJwt.v1.yaml
                required:
                  - jwt
          description: Created. The response contains the encoded JWT authorizing the user.
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    enum:
                      - The given email/password combination is not valid.
                    type: string
                required:
                  - message
          description: Unauthorized
        default:
          $ref: '#/components/responses/DefaultResponse'
      security: []
      summary: Create a login request for a user.
      tags:
        - both clients
  /user/password/recovery:
    post:
      description: "Request a link to recover a user's password."
      operationId: post-user-password-recovery
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  format: email
                  type: string
              required:
                - email
              type: object
      responses:
        '204':
          description: No Content
        default:
          $ref: '#/components/responses/DefaultResponse'
      security: []
      summary: "Create a request to recover a user's password."
      tags:
        - mobile app
  /users:
    get:
      description: Get all users registered on Stalker. Admins only.
      operationId: get-users
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: ./model/user/User.v1.yaml
                required:
                  - users
          description: Ok.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: Read all users.
      tags:
        - web app
    post:
      description: Create a new user.
      operationId: post-user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                loginData:
                  $ref: ./model/user/LoginData.v1.yaml
                userData:
                  $ref: ./model/user/UserData.v1.yaml
              required:
                - loginData
                - userData
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    $ref: ./model/user/EncodedJwt.v1.yaml
                required:
                  - jwt
          description: Created. The response contains the JWT authorizing the user.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/DefaultResponse'
      security: []
      summary: Create a user.
      tags:
        - mobile app
  /version:
    get:
      description: Get the current server version.
      operationId: get-version
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: "The server's version number."
                    example: 0.1.0
                    pattern: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$"
                required:
                  - version
          description: Ok. The response contains the current server version.
        default:
          $ref: '#/components/responses/DefaultResponse'
      summary: "Read the server's current version."
      tags:
        - both clients
      security: []
components:
  parameters:
    userId:
      in: path
      name: userId
      description: The id of a user.
      required: true
      schema:
        $ref: ./model/GenericId.v1.yaml
    organizationId:
      in: path
      name: organizationId
      description: The id of an organization.
      required: true
      schema:
        $ref: ./model/GenericId.v1.yaml
    placeId:
      in: path
      name: placeId
      description: The id of a place.
      required: true
      schema:
        $ref: ./model/GenericId.v1.yaml
  responses:
    BadRequest:
      description: The server could not process the request due to a client mistake.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum:
                  - The server could not process the request due to a client mistake.
            required:
              - message
    Unauthorized:
      description: The server could not authenticate the user.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum:
                  - The server could not authenticate the user.
            required:
              - message
    Forbidden:
      description: The server could not authorize the user.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum:
                  - The server could not authorize the user.
            required:
              - message
    NotFound:
      description: The requested resource does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum:
                  - The requested resource does not exist.
                description: Resource not found.
            required:
              - message
    DefaultResponse:
      description: The server encountered an unexpected error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                enum:
                  - The server encountered an unexpected error.
                description: Unexpected error.
            required:
              - message
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: The token is sent through the Authorization header with Bearer schema.
security:
  - JWT: []
