openapi: "3.0.2"

info:
  title: Stalker API
  description: |
    The API specification developed by GruppOne for the Stalker project.
  contact:
    name: GruppOne
    email: gruppone.swe@gmail.com
    url: https://github.com/GruppOne

  version: "0.1.0"

servers:
  - url: http://localhost:8080
    description: Development server
  # TODO specify servers using an appropriate variable
  # - url: https://{environment}.GruppOne.com/v1
  #     variables:
  #       environment:
  #         default: api    # Production server
  #         enum:
  #           - api         # Production server
  #           - api.dev     # Development server
  #           - api.staging # Staging server

# TODO clarify the difference between monitor and tracking
tags:
  - name: monitor
    description: Operations concerning monitoring organizations and places.
  - name: organizations
    description: Operations concerning organizations.
  - name: stalker mobile app
    description: This operation should be available to mobile app users.
  - name: stalker web app
    description: This operation should be available to web app users (owners, managers, viewers).
  - name: tracking
    description: Operations concerning users tracking.
  - name: users
    description: Operations concerning users.

# TODO finish adding mobile app/ web app tags to every operation!!
# TODO all descriptions should be capitalized, use the imperative mode (like commit messages) and end with a "."
# TODO all operationIds should start with a lowercase letter
# TODO all operationIds should start with a verb: createNewUser OK, newUser BAD
paths:
  /user:
    # TODO is it actually needed to get ALL users?
    # TODO only admins should be authorized to do this
    get:
      tags:
        - users
      description: Return the list of registered users. This is a reserved operation.
      operationId: getAllUsers
      responses:
        "200":
          description: Success
          # TODO specify response schema (array of users)
        "404":
          description: No users are currently registered in the server.

    post:
      tags:
        - stalker mobile app
        - stalker web app
        - users
      description: Registers a new user. This operation is only available from the mobile app.
      operationId: createNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # FIXME this reference does not work correctly.
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User was registered successfully.
        "406":
          description: Another user was already registered with the given email.

  # TODO should this path use a {userId} parameter?
  /user/login:
    post:
      tags:
        - stalker mobile app
        - stalker web app
        - users
      description: Logs in an existing user.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Login was successful
        "400":
          description: Incorrect credentials

  # TODO should this path use a {userId} parameter?
  /user/logout:
    post:
      tags:
        - users
      description: Logs out an user from a client.
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloseSession"
      responses:
        "200":
          description: Successfully logged out
        "408":
          description: Request timed out

  /user/passwordRecovery:
    post:
      tags:
        - users
      description: an user wants to reset his Stalker account's password
      operationId: userPasswordRecovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              description: The email address of the account that needs to recover the password.
      responses:
        "200":
          description: An email was sent to the specified address.
        "406":
          description: Email does not match an account.

  /user/{userId}:
    # if a parameter is shared between all operations, it should be placed outside the operations
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags:
        - users
      description: Gets all information for the given user.
      operationId: getUser
      responses:
        "200":
          description: Success.
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - users
      description: Delete the specified user account.
      operationId: deleteUser
      responses:
        "200":
          description: Success, an user has been deleted.
        "400":
          description: Invalid username supplied.
        "404":
          description: User not found.

    put:
      tags:
        - users
      description: Updates information for an user.
      # TODO specify request body. It should be a subset with ONLY THE USER INFORMATION THAT CHANGED
      responses:
        "200":
          description: Success.
        "404":
          description: Requested user was not found.

  /user/{userId}/history:
    get:
      tags:
        - users
      description: Gets the history of this user accesses to all organizations.
      operationId: userHistoryById
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success.
        "404":
          description: User has no history.

  # connect/disconnect to/from an organization
  # TODO this path should be "/user/{userId}/organization/{organizationId}" because of clarity
  # if "/organization/" is not specified the URL becomes ugly to read
  /user/{userId}/{organizationId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/organizationId"
    get:
      tags:
        - users
        - organizations
      description: Connect the current user to the given organization.
      operationId: connectUserToOrganization
      responses:
        "200":
          description: Successful connection
        "408":
          description: Requested timed out
    delete:
      tags:
        - users
        - organizations
      description: Disconnect the current user from a specified organization.
      operationId: disconnectUserFromOrganization
      responses:
        "200":
          description: Successful disconnection
        "408":
          description: Requested timed out

  #FIXME is it needed?? Because this action is client-side (a filter in mobile application)
  /user/{userId}/findConnectedOrganizations:
    get:
      tags:
        - users
        - organizations
      description: Returns the list of organizations that a user has connected to.
      operationId: getConnectedOrganizationsByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: The list of the ids of the organizations the user is connected to

  /organization:
    get:
      tags:
        - organizations
      description: Returns the list of all the organizations registered to Stalker.
      operationId: getOrganizations
      responses:
        "200":
          description: The list of organizations registered to Stalker
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        "404":
          $ref: "#/components/responses/NotFound"

    # XXX only an administrator should be able to do this
    post:
      tags:
        - organizations
      description: Creates a new organization.
      operationId: createNewOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the organization has been created
        "400":
          description: The organization already exists

    put:
      tags:
        - organizations
        - stalker web app
      description: Updates an organization's information.
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: List of organization updated
        "405":
          description: Validation exception
        "408":
          description: Request timed out

  /organization/{organizationId}:
    parameters:
      - $ref: "#/components/parameters/organizationId"
    get:
      tags:
        - organizations
      description: Get information about a specific organization.
      operationId: getOrganizationById
      responses:
        "200":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - organizations
      description: the administrator wants to delete the specified organization
      operationId: deleteOrganizationById
      responses:
        "200":
          description: Success, the organization has been deleted
        "400":
          description: Organization not found
        "408":
          description: Request timed out

  # FIXME this should be a PUT inside /organization
  /organization/{organizationId}/changeData:
    post:
      tags:
        - organizations
      description: The administrator wants to send the changed data about a specific organization.
      operationId: changeOrganizationData
      parameters:
        - $ref: "#/components/parameters/organizationId"
      # TODO request body should include ONLY the changed info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been modified.
        "408":
          description: Request timed out.

  # TODO this maybe should be /organization/{organizationId}/place:
  # TODO this can only be done by managers and up
  /organization/{organizationId}/addPlace:
    parameters:
      - $ref: "#/components/parameters/organizationId"

    post:
      tags:
        - organizations
      description: Adds a new place to the given organization.
      operationId: addPlaceIntoAnOrganizationById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been created
        "400":
          description: The place already exists inside the current organization

  /organization/{organizationId}/{placeId}/changeData:
    parameters:
      - $ref: "#/components/parameters/organizationId"
      - $ref: "#/components/parameters/placeId"

    # TODO this should be a PUT not POST
    # TODO managers and up
    post:
      tags:
        - organizations
      description: Change data for a place.
      operationId: changePlaceData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, the place has been modified
        "400":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: delete the specified place
      operationId: deletePlace
      responses:
        "200":
          description: Success, the place has been deleted
        "404":
          description: Place not found

  # monitor a specific organization
  /monitor/organization/{organizationId}:
    get:
      tags:
        - monitor
        - organization
      summary: a viewer wants to know the number of users in an specific organization
      operationId: getNumberUserInAnOrganitazion
      parameters:
        - $ref: "#/components/parameters/organizationId"
      responses:
        "200":
          description: Success, the number of users has been received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationUserCounter"
        "404":
          description: Organization not found

  # monitor a specific place in a private organization
  /monitor/organization/{organizationId}/place/{placeId}:
    get:
      tags:
        - monitor
        - organization
      summary: a viewer wants to know the number of users in a specific place of a specific PRIVATE organization
      operationId: getNumberUserInAPlace
      parameters:
        - $ref: "#/components/parameters/organizationId"
        - $ref: "#/components/parameters/placeId"
      responses:
        "200":
          description: Success, the number of users has been received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceUserCounter"
        "404":
          description: Place inside the organization not found

  # monitor a specific employee
  /monitor/{userId}:
    get:
      tags:
        - monitor
        - organization
      summary: a viewer wants to know all the data concerning the accesses of a specific employee
      description: this operation is permitted only if the user is inside a private organization
      operationId: getAccessInformationByUserId
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success, the informations about the user has been received
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/OrganizationUserCounter"
                  - $ref: "#/components/schemas/PlaceUserCounter"
        "404":
          description: "Operation not allowed: the specified user is inside a public organization"

  #FIXME There should be an other endpoint concerning the entire report of user accesses, but this requirements is optional. So, go on

  # unique endpoint to describe adding/deleting web app users (i.e. an admin create/delete an owner exc.)
  /user/{userId}/createUser:
    post:
      tags:
        - users
      summary: the operation which describes the creation of all new users for web application
      operationId: createNewUserInAnOrganization
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Success, a new user has been created
        "404":
          description: "Operation not allowed: the current user has no creation permission"
        "408":
          description: Request timed out

  /user/{userId}/deleteUser:
    delete:
      tags:
        - users
      summary: the operation which describes the deletion of all new users for web application
      operationId: deleteUserInAnOrganization
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success, an user has been deleted
        "404":
          description: "Operation not allowed: the current user has no deletion permission"

  #FIXME an user required his personal data in "My profile": optional?
  /user/{userId}/userData:
    get:
      tags:
        - users
      summary: an user required the visualization of his personal data
      operationId: personalUserDataById
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Success
        "408":
          description: Request timed out

  # enter/exit in an organization (necessary for the comunication with InfluxDB)
  /tracking/organization:
    post:
      tags:
        - tracking
      summary: an user accesses into an organization
      operationId: AccessOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, an user has entered into an organization
        "408":
          description: Request timed out
    delete:
      tags:
        - tracking
      summary: an user exits from an organization
      operationId: ExitOrganization
      responses:
        "200":
          description: Success, an user has exited by an organization
        "408":
          description: Request timed out

  # enter/exit in a place of an organization (necessary for the comunication with InfluxDB)
  /tracking/organization/place:
    post:
      tags:
        - tracking
      summary: an user accesses into a place of an organization
      operationId: AccessOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - $ref: "#/components/schemas/Organization"
      responses:
        "200":
          description: Success, an user has entered into an organization
        "408":
          description: Request timed out
    delete:
      tags:
        - tracking
      summary: an user exits from a place of an organization
      operationId: ExitOrganization
      responses:
        "200":
          description: Success, an user has exited by a place of an organization
        "408":
          description: Request timed out

  # an user become anonymous into an organization
  /tracking/{userId}/{organizationId}/unknownIdentity:
    post:
      tags:
        - tracking
      summary: the operation which permits to a specific users to make unknown his identity into a current specific PRIVATE organization
      operationId: UnknownUserTracking
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppConnections"
      responses:
        "200":
          description: Success, now the identity user is unknown
        "408":
          description: Request timed out

  # an user become known into an organization
  /tracking/{userId}/{organizationId}/knownIdentity:
    post:
      tags:
        - tracking
      summary: the operation which permits to a specific users to make known his identity into a current specific PRIVATE organization
      operationId: KnownUserTracking
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/organizationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppConnections"
      responses:
        "200":
          description: Success, now the identity user is known
        "408":
          description: Request timed out

  #TODO is it needed? What does it mean?
  # /user/findByOrganization/{organizationId}:
  #   get:
  #     responses:
  #       "200":
  #         responseBody:

components:
  parameters:
    userId:
      in: path
      name: userId
      schema:
        type: integer
      required: true
      description: id of the user

    organizationId:
      in: path
      name: organizationId
      schema:
        type: integer
      required: true
      description: numeric id of the organization

    placeId:
      in: path
      name: placeId
      description: Numeric id of the place.
      required: true
      schema:
        type: integer
        format: int64

  responses:
    NotFound:
      description: The specified resource was not found
      # content:
      #   application/json:
      #     schema:
      #       $ref: "../api-specification.yaml#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized
      # content:
      #   application/json:
      #     schema:
      #       $ref: "../api-specification.yaml#/components/schemas/Error"

  schemas:
    User:
      $ref: "./schemas/user.yaml"

    Organization:
      $ref: "./schemas/organization.yaml"

    AppConnections:
      $ref: "./schemas/appConnections.yaml"

    CloseSession:
      $ref: "./schemas/closeSession.yaml"

    OrganizationUserCounter:
      $ref: "./schemas/organizationUserCounter.yaml"

    PlaceUserCounter:
      $ref: "./schemas/placeUserCounter.yaml"

    #TODO
    UserAccessToPlace:
      type: object
      properties:
        property:
          type: integer

    #TODO
    UserExitFromPlace:
      type: object
      properties:
        property:
          type: integer

  securitySchemes:
    # arbitrary name for the security scheme
    AdminKey:
      type: apiKey
      # can be "header", "query" or "cookie"
      in: header
      # name of the header, query parameter or cookie
      name: X-ADMIN-API-KEY
    UserAuthorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "https://domain.test/api/oauth/dialog"
          scopes:
            # TODO maybe this could only be allowed through api key?
            admin: A Stalker administrator
            owner: An organization's owner authorized operations
            # TODO is this the name we decided?
            manager: An organization's manager authorized operations
            viewer: An organization's viewer authorized operations

            user: Generic app user
